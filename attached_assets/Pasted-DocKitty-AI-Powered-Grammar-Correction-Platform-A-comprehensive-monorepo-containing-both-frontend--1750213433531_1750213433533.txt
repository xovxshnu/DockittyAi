DocKitty - AI-Powered Grammar Correction Platform
A comprehensive monorepo containing both frontend and backend applications for AI-powered document grammar correction with multiple writing styles.
🏗️ Project Architecture
dockitty/
├── 📁 frontend/                    # React application (Netlify)
├── 📁 backend/                     # Node.js API service (Render)
├── 📁 shared/                      # Shared utilities and types
├── 📁 docs/                        # Documentation and guides
├── 📁 scripts/                     # Development and deployment scripts
├── 📄 package.json                 # Root package.json with workspaces
├── 📄 .env.example                 # Environment variables template
├── 📄 .gitignore                   # Git ignore rules
├── 📄 README.md                    # This file
├── 📄 LICENSE                      # MIT License
└── 📄 docker-compose.yml           # Local development setup
🚀 Quick Start
Prerequisites

Node.js 18.0 or higher
npm or yarn package manager
OpenAI API key

Installation & Setup
bash# Clone the repository
git clone https://github.com/yourusername/dockitty.git
cd dockitty

# Install all dependencies (frontend + backend)
npm install

# Set up environment variables
cp .env.example .env
# Edit .env with your OpenAI API key and configuration

# Start both frontend and backend in development mode
npm run dev

# Or start services individually
npm run dev:frontend    # React app on http://localhost:5173
npm run dev:backend     # Express API on http://localhost:5000
📋 Features Overview
🔧 Core Functionality

Multi-format Document Processing: PDF, DOC, DOCX, TXT support with intelligent text extraction
AI-Powered Grammar Correction: OpenAI GPT-3.5-turbo integration for context-aware corrections
Four Writing Styles: Professional, Casual, Academic, and Creative correction variants
Real-time Processing: Live progress indicators and status updates
Secure File Handling: Validation, size limits, and automatic cleanup

🎨 User Experience

Drag & Drop Upload: Intuitive file upload with visual feedback
Responsive Design: Mobile-optimized interface with modern aesthetics
Interactive UI: Hover effects, animations, and smooth transitions
One-click Downloads: Instant download of corrected documents
Error Recovery: Comprehensive error handling with user-friendly messages

📁 Detailed Project Structure
Frontend Application (/frontend)
frontend/
├── public/
│   ├── favicon.ico
│   ├── manifest.json
│   └── index.html
├── src/
│   ├── components/
│   │   ├── ui/
│   │   │   ├── FileUpload.jsx           # Drag & drop upload component
│   │   │   ├── ProcessingStatus.jsx     # Real-time processing updates
│   │   │   ├── ResultsDisplay.jsx       # Grammar correction results
│   │   │   └── StyleCard.jsx            # Individual style preview cards
│   │   ├── layout/
│   │   │   ├── Header.jsx               # Application header
│   │   │   ├── Footer.jsx               # Application footer
│   │   │   └── Layout.jsx               # Main layout wrapper
│   │   └── common/
│   │       ├── LoadingSpinner.jsx       # Reusable loading component
│   │       ├── ErrorMessage.jsx         # Error display component
│   │       └── Button.jsx               # Styled button component
│   ├── hooks/
│   │   ├── useFileUpload.js             # File upload logic
│   │   ├── useDocumentProcessor.js      # Document processing state
│   │   └── useDownload.js               # Download functionality
│   ├── services/
│   │   ├── api.js                       # API client configuration
│   │   └── fileHandler.js               # File handling utilities
│   ├── utils/
│   │   ├── fileValidation.js            # Client-side file validation
│   │   ├── formatters.js                # Text formatting utilities
│   │   └── constants.js                 # Application constants
│   ├── styles/
│   │   └── globals.css                  # Global styles and Tailwind imports
│   ├── App.jsx                          # Main application component
│   └── main.jsx                         # React application entry point
├── package.json                         # Frontend dependencies
├── vite.config.js                       # Vite build configuration
├── tailwind.config.js                   # Tailwind CSS configuration
├── .env.example                         # Frontend environment variables
└── README.md                            # Frontend-specific documentation
Backend API Service (/backend)
backend/
├── src/
│   ├── controllers/
│   │   ├── uploadController.js          # Document upload handling
│   │   ├── downloadController.js        # Document download generation
│   │   └── healthController.js          # Health check endpoint
│   ├── middleware/
│   │   ├── fileValidation.js            # Server-side file validation
│   │   ├── errorHandler.js              # Global error handling
│   │   ├── cors.js                      # CORS configuration
│   │   └── rateLimiting.js              # API rate limiting
│   ├── services/
│   │   ├── textExtractor.js             # Multi-format text extraction
│   │   ├── grammarCorrector.js          # OpenAI integration service
│   │   ├── documentProcessor.js         # Document processing pipeline
│   │   └── fileManager.js               # File system operations
│   ├── utils/
│   │   ├── fileHelpers.js               # File utility functions
│   │   ├── stylePrompts.js              # AI prompt templates
│   │   ├── validators.js                # Input validation utilities
│   │   └── logger.js                    # Application logging
│   ├── routes/
│   │   ├── api.js                       # Main API routes
│   │   ├── upload.js                    # Upload-specific routes
│   │   └── health.js                    # Health check routes
│   └── config/
│       ├── database.js                  # Database configuration (future)
│       ├── openai.js                    # OpenAI client setup
│       └── environment.js               # Environment configuration
├── uploads/                             # Temporary file storage
├── logs/                                # Application logs
├── tests/                               # Backend test files
├── server.js                            # Express server entry point
├── package.json                         # Backend dependencies
├── .env.example                         # Backend environment variables
└── README.md                            # Backend-specific documentation
Shared Resources (/shared)
shared/
├── types/
│   ├── api.ts                           # API response/request types
│   ├── document.ts                      # Document-related types
│   └── user.ts                          # User-related types (future)
├── constants/
│   ├── fileTypes.js                     # Supported file types
│   ├── styleTypes.js                    # Grammar correction styles
│   └── errorCodes.js                    # Standardized error codes
├── utils/
│   ├── validation.js                    # Shared validation functions
│   ├── formatting.js                    # Text formatting utilities
│   └── helpers.js                       # Common helper functions
└── schemas/
    ├── upload.json                      # Upload request schema
    ├── correction.json                  # Correction response schema
    └── error.json                       # Error response schema
Documentation (/docs)
docs/
├── api/
│   ├── endpoints.md                     # API endpoint documentation
│   ├── authentication.md               # Authentication guide (future)
│   └── rate-limits.md                   # Rate limiting information
├── deployment/
│   ├── netlify.md                       # Netlify deployment guide
│   ├── render.md                        # Render deployment guide
│   └── docker.md                        # Docker deployment guide
├── development/
│   ├── setup.md                         # Development environment setup
│   ├── contributing.md                  # Contribution guidelines
│   └── architecture.md                  # Technical architecture
└── user/
    ├── getting-started.md               # User getting started guide
    ├── features.md                      # Feature documentation
    └── troubleshooting.md               # Common issues and solutions
Development Scripts (/scripts)
scripts/
├── setup/
│   ├── install-deps.sh                  # Install all dependencies
│   ├── setup-env.sh                     # Environment setup
│   └── check-prereqs.sh                 # Prerequisites validation
├── development/
│   ├── start-dev.sh                     # Start development servers
│   ├── build-all.sh                     # Build all applications
│   └── test-all.sh                      # Run all tests
├── deployment/
│   ├── deploy-frontend.sh               # Deploy frontend to Netlify
│   ├── deploy-backend.sh                # Deploy backend to Render
│   └── health-check.sh                  # Post-deployment health check
└── maintenance/
    ├── cleanup-uploads.sh               # Clean temporary files
    ├── backup-logs.sh                   # Backup application logs
    └── update-deps.sh                   # Update dependencies
🛠️ Technology Stack
Frontend Technologies

Framework: React 18 with hooks and modern patterns
Build Tool: Vite for fast development and optimized production builds
Styling: Tailwind CSS for utility-first responsive design
Icons: Lucide React for consistent iconography
State Management: React hooks (useState, useEffect, useContext)
HTTP Client: Fetch API with comprehensive error handling

Backend Technologies

Runtime: Node.js 18+ with Express.js framework
File Processing: Multer for uploads, Mammoth for Word docs, PDF-Parse for PDFs
AI Integration: OpenAI API with GPT-3.5-turbo for grammar correction
Security: CORS, rate limiting, file validation, environment variables
Development: Nodemon for hot reloading, concurrently for parallel processes

Shared Infrastructure

Version Control: Git with conventional commits
Package Management: npm workspaces for monorepo management
Code Quality: ESLint, Prettier for consistent code formatting
Documentation: Markdown with standardized structure
Environment: dotenv for configuration management

📦 Package Configuration
Root Package.json (Workspaces)
json{
  "name": "dockitty",
  "version": "1.0.0",
  "description": "AI-powered grammar correction platform",
  "private": true,
  "workspaces": [
    "frontend",
    "backend",
    "shared"
  ],
  "scripts": {
    "install:all": "npm install && npm run install:frontend && npm run install:backend",
    "install:frontend": "cd frontend && npm install",
    "install:backend": "cd backend && npm install",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm run test",
    "test:backend": "cd backend && npm run test",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "cd backend && npm run lint",
    "clean": "rm -rf node_modules frontend/node_modules backend/node_modules frontend/dist backend/dist",
    "deploy:frontend": "cd frontend && npm run build && netlify deploy --prod",
    "deploy:backend": "cd backend && git push render main",
    "health-check": "node scripts/health-check.js"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "eslint": "^8.45.0",
    "prettier": "^3.0.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
}
🌍 Environment Configuration
Root Environment Template (.env.example)
env# =================================
# DOCKITTY MONOREPO CONFIGURATION
# =================================

# Development/Production Environment
NODE_ENV=development

# =================================
# BACKEND CONFIGURATION
# =================================

# Server Configuration
BACKEND_PORT=5000
BACKEND_HOST=localhost

# OpenAI API Configuration
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-3.5-turbo
OPENAI_MAX_TOKENS=2000

# File Upload Configuration
MAX_FILE_SIZE=10485760  # 10MB in bytes
UPLOAD_DIR=./backend/uploads
ALLOWED_FILE_TYPES=pdf,doc,docx,txt

# Security Configuration
JWT_SECRET=your_jwt_secret_here  # For future authentication
CORS_ORIGIN=http://localhost:5173
RATE_LIMIT_WINDOW=900000  # 15 minutes
RATE_LIMIT_MAX=100  # Max requests per window

# =================================
# FRONTEND CONFIGURATION
# =================================

# API Configuration
VITE_API_URL=http://localhost:5000
VITE_API_TIMEOUT=30000

# Application Configuration
VITE_APP_NAME=DocKitty
VITE_APP_VERSION=1.0.0
VITE_MAX_FILE_SIZE=10485760

# Feature Flags
VITE_ENABLE_ANALYTICS=false
VITE_ENABLE_ERROR_REPORTING=false

# =================================
# DEPLOYMENT CONFIGURATION
# =================================

# Production URLs
PROD_FRONTEND_URL=https://dockitty.netlify.app
PROD_BACKEND_URL=https://dockitty-api.onrender.com

# Deployment Tokens (Production Only)
NETLIFY_AUTH_TOKEN=your_netlify_token
RENDER_API_KEY=your_render_api_key
🚀 Deployment Strategy
Development Workflow
bash# 1. Start development environment
npm run dev  # Starts both frontend and backend

# 2. Make changes to either frontend or backend
# Files are watched and auto-reload

# 3. Test changes
npm run test

# 4. Build for production
npm run build

# 5. Deploy to staging/production
npm run deploy:frontend  # Netlify
npm run deploy:backend   # Render
Production Deployment
Frontend (Netlify)
bash# Automatic deployment via Git integration
# Build command: cd frontend && npm run build
# Publish directory: frontend/dist
# Environment variables set in Netlify dashboard
Backend (Render)
bash# Automatic deployment via Git integration
# Build command: cd backend && npm install
# Start command: cd backend && npm start
# Environment variables set in Render dashboard
Docker Development (Optional)
dockerfile# docker-compose.yml
version: '3.8'
services:
  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://backend:5000

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - FRONTEND_URL=http://frontend:5173
      - OPENAI_API_KEY=${OPENAI_API_KEY}
🔧 Development Commands
Monorepo Management
bash# Install all dependencies
npm run install:all

# Start development servers
npm run dev

# Build all applications
npm run build

# Run all tests
npm run test

# Lint all code
npm run lint

# Clean all build artifacts
npm run clean
Individual Service Commands
bash# Frontend only
npm run dev:frontend
npm run build:frontend
npm run test:frontend

# Backend only
npm run dev:backend
npm run build:backend
npm run test:backend
🔒 Security & Best Practices
Security Measures

File Validation: Client and server-side file type/size validation
Rate Limiting: API endpoint protection against abuse
CORS Configuration: Restricted cross-origin access
Environment Variables: Secure configuration management
Input Sanitization: XSS and injection attack prevention
Error Handling: Secure error messages without information leakage

Code Quality

ESLint Configuration: Consistent code style enforcement
Prettier Integration: Automatic code formatting
Git Hooks: Pre-commit validation and testing
TypeScript Support: Gradual migration to type safety
Component Testing: Unit tests for critical components

📊 Performance Optimization
Frontend Optimizations

Code Splitting: Route-based and component-based splitting
Lazy Loading: Deferred loading of non-critical components
Image Optimization: Compressed assets and proper formats
Bundle Analysis: Dependency optimization and tree shaking
Caching Strategy: Browser caching and service worker integration

Backend Optimizations

Request Optimization: Efficient file processing pipelines
Memory Management: Proper cleanup of temporary files
API Response Caching: Redis integration for frequent responses
Database Indexing: Optimized query performance (future feature)
Load Balancing: Horizontal scaling preparation

🤝 Contributing
Development Setup

Fork and Clone
bashgit clone https://github.com/yourusername/dockitty.git
cd dockitty

Install Dependencies
bashnpm run install:all

Environment Setup
bashcp .env.example .env
# Edit .env with your configuration

Start Development
bashnpm run dev


Contribution Guidelines

Branching: Use feature branches (feature/feature-name)
Commits: Follow conventional commit format
Testing: Add tests for new features
Documentation: Update relevant documentation
Code Review: Submit pull requests for review

Project Roadmap

Phase 1: Core grammar correction functionality ✅
Phase 2: User authentication and document history
Phase 3: Advanced AI models and custom training
Phase 4: Collaboration features and team workspaces
Phase 5: Mobile applications and offline support

📄 License
This project is licensed under the MIT License - see the LICENSE file for details.
🆘 Support & Contact

Documentation: Check the /docs directory for detailed guides
Issues: Report bugs and feature requests on GitHub
Email: support@dockitty.com
Community: Join our Discord server for discussions

🙏 Acknowledgments

OpenAI: For providing powerful language models
React Team: For the excellent frontend framework
Tailwind CSS: For the utility-first CSS framework
Vite: For the fast build tool and development experience
Express.js: For the robust backend framework
Contributors: All developers who contribute to this project


DocKitty - Transform your documents with AI-powered grammar correction in multiple writing styles. Perfect for professionals, students, and writers who demand excellence in their written communication.